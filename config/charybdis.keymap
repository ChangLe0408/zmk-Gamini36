#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 5>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29 28 29 28 29 28 29>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q                  &kp W            &kp E        &kp R         &kp T    &kp Y  &kp U         &kp I      &kp O    &kp P
  &kp A                  &kp S            &kp D        &kp F         &kp G    &kp H  &kp J         &kp K      &kp L    &kp SEMI
  &kp Z                  &kp X            &kp C        &kp V         &kp B    &kp N  &kp M         &kp COMMA  &kp DOT  &kp FSLH
  &hm LEFT_ALT CAPSLOCK  &hm LCTRL LSHFT  &ltq 1 BSPC  &ltq 2 ENTER  &kp TAB         &ltq 2 SPACE  &kp RSHFT  &to 5
            >;
        };

        Lower {
            label = "Lower";
            bindings = <
  &trans     &kp LA(A)  &kp UP     &trans     &trans     &trans     &kp N7  &kp N8      &kp N9  &trans
  &kp LC(A)  &kp LEFT   &kp DOWN   &kp RIGHT  &trans     &kp EQUAL  &kp N4  &kp N5      &kp N6  &trans
  &kp LC(Z)  &kp LC(X)  &kp RC(C)  &kp LC(V)  &kp LG(V)  &kp MINUS  &kp N1  &kp N2      &kp N3  &trans
  &trans     &trans     &trans     &trans     &trans                &kp N0  &kp PERIOD  &trans
            >;
        };

        Raise {
            label = "Raise";
            bindings = <
  &kp EXCL      &kp AT        &kp HASH  &kp DLLR  &kp PRCNT       &kp CARET  &kp AMPS         &kp ASTERISK  &kp LPAR                        &kp RPAR
  &kp ESCAPE    &kp CAPSLOCK  &kp HOME  &kp END   &kp UNDERSCORE  &kp MINUS  &kp RIGHT_SHIFT  &kp PAGE_UP   &kp PAGE_DOWN                   &as PIPE NON_US_BACKSLASH
  &out OUT_TOG  &bootloader   &trans    &trans    &kp TILDE       &kp GRAVE  &as PLUS EQUAL   &kp SQT       &as DOUBLE_QUOTES SINGLE_QUOTE  &kp DELETE
  &trans        &trans        &trans    &trans    &trans                     &trans           &trans        &trans
            >;
        };

        Shortcut {
            label = "shortcut";
            bindings = <
  &bt BT_DISC 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &kp NUMBER_5      &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
  &kp LG(A)      &kp LG(S)     &kp LG(D)     &kp LG(F)   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_SHIFT  &kp F6        &kp F7        &kp F8
  &kp LG(Z)      &kp LG(X)     &kp LG(C)     &kp LG(V)   &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp F1           &kp F2        &kp F3        &kp F4
  &trans         &trans        &trans        &trans      &trans                               &trans           &trans        &trans
            >;
        };

        Game {
            label = "Game";
            bindings = <
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp LC(RA(Y))  &kp LC(RA(U))  &kp LC(RA(I))  &kp LC(RA(H))  &kp LC(RA(J))
  &kp L         &kp O         &kp Y         &kp K         &kp G         &trans         &trans         &trans         &trans         &trans
  &none         &to 0         &none         &kp NUMBER_6  &kp NUMBER_7  &trans         &trans         &trans         &trans         &trans
  &trans        &trans        &trans        &trans        &trans                       &trans         &trans         &trans
            >;
        };

        Mouse {
            bindings = <
  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans
  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans
  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans
  &trans  &trans  &trans  &trans  &trans          &trans     &trans     &trans
            >;
        };
    };
};
